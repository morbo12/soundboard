// // Mocks generated by Mockito 5.4.5 from annotations
// // in soundboard/test/test_audiomanager.dart.
// // Do not manually edit this file.

// // ignore_for_file: no_leading_underscores_for_library_prefixes
// import 'dart:async' as _i3;
// import 'dart:typed_data' as _i8;

// import 'package:audioplayers/audioplayers.dart' as _i2;
// import 'package:flutter/widgets.dart' as _i4;
// import 'package:flutter_riverpod/src/internals.dart' as _i5;
// import 'package:mockito/mockito.dart' as _i1;
// import 'package:mockito/src/dummies.dart' as _i7;
// import 'package:soundboard/features/screen_home/application/audioplayer/data/class_mainvolume.dart'
//     as _i10;
// import 'package:soundboard/features/screen_home/application/audioplayer/player_fade.dart'
//     as _i9;
// import 'package:soundboard/utils/logger.dart' as _i11;
// import 'package:state_notifier/state_notifier.dart' as _i6;

// // ignore_for_file: type=lint
// // ignore_for_file: avoid_redundant_argument_values
// // ignore_for_file: avoid_setters_without_getters
// // ignore_for_file: comment_references
// // ignore_for_file: deprecated_member_use
// // ignore_for_file: deprecated_member_use_from_same_package
// // ignore_for_file: implementation_imports
// // ignore_for_file: invalid_use_of_visible_for_testing_member
// // ignore_for_file: must_be_immutable
// // ignore_for_file: prefer_const_constructors
// // ignore_for_file: unnecessary_parenthesis
// // ignore_for_file: camel_case_types
// // ignore_for_file: subtype_of_sealed_class

// class _FakeAudioCache_0 extends _i1.SmartFake implements _i2.AudioCache {
//   _FakeAudioCache_0(Object parent, Invocation parentInvocation)
//       : super(parent, parentInvocation);
// }

// class _FakeCompleter_1<T> extends _i1.SmartFake implements _i3.Completer<T> {
//   _FakeCompleter_1(Object parent, Invocation parentInvocation)
//       : super(parent, parentInvocation);
// }

// class _FakeBuildContext_2 extends _i1.SmartFake implements _i4.BuildContext {
//   _FakeBuildContext_2(Object parent, Invocation parentInvocation)
//       : super(parent, parentInvocation);
// }

// class _FakeProviderSubscription_3<State> extends _i1.SmartFake
//     implements _i5.ProviderSubscription<State> {
//   _FakeProviderSubscription_3(Object parent, Invocation parentInvocation)
//       : super(parent, parentInvocation);
// }

// class _FakeAlwaysAliveRefreshable_4<T1> extends _i1.SmartFake
//     implements _i5.AlwaysAliveRefreshable<T1> {
//   _FakeAlwaysAliveRefreshable_4(Object parent, Invocation parentInvocation)
//       : super(parent, parentInvocation);
// }

// class _FakeStateNotifierProviderElement_5<
//         NotifierT1 extends _i6.StateNotifier<T1>, T1> extends _i1.SmartFake
//     implements _i5.StateNotifierProviderElement<NotifierT1, T1> {
//   _FakeStateNotifierProviderElement_5(
//     Object parent,
//     Invocation parentInvocation,
//   ) : super(parent, parentInvocation);
// }

// class _FakeOverride_6 extends _i1.SmartFake implements _i5.Override {
//   _FakeOverride_6(Object parent, Invocation parentInvocation)
//       : super(parent, parentInvocation);
// }

// class _FakeAlwaysAliveProviderListenable_7<State> extends _i1.SmartFake
//     implements _i5.AlwaysAliveProviderListenable<State> {
//   _FakeAlwaysAliveProviderListenable_7(
//     Object parent,
//     Invocation parentInvocation,
//   ) : super(parent, parentInvocation);
// }

// class _FakeWidgetRef_8 extends _i1.SmartFake implements _i5.WidgetRef {
//   _FakeWidgetRef_8(Object parent, Invocation parentInvocation)
//       : super(parent, parentInvocation);
// }

// /// A class which mocks [AudioPlayer].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockAudioPlayer extends _i1.Mock implements _i2.AudioPlayer {
//   MockAudioPlayer() {
//     _i1.throwOnMissingStub(this);
//   }

//   @override
//   _i2.AudioCache get audioCache => (super.noSuchMethod(
//         Invocation.getter(#audioCache),
//         returnValue: _FakeAudioCache_0(
//           this,
//           Invocation.getter(#audioCache),
//         ),
//       ) as _i2.AudioCache);

//   @override
//   set audioCache(_i2.AudioCache? _audioCache) => super.noSuchMethod(
//         Invocation.setter(#audioCache, _audioCache),
//         returnValueForMissingStub: null,
//       );

//   @override
//   String get playerId => (super.noSuchMethod(
//         Invocation.getter(#playerId),
//         returnValue: _i7.dummyValue<String>(
//           this,
//           Invocation.getter(#playerId),
//         ),
//       ) as String);

//   @override
//   _i2.PlayerState get desiredState => (super.noSuchMethod(
//         Invocation.getter(#desiredState),
//         returnValue: _i2.PlayerState.stopped,
//       ) as _i2.PlayerState);

//   @override
//   set desiredState(_i2.PlayerState? _desiredState) => super.noSuchMethod(
//         Invocation.setter(#desiredState, _desiredState),
//         returnValueForMissingStub: null,
//       );

//   @override
//   _i3.Completer<void> get creatingCompleter => (super.noSuchMethod(
//         Invocation.getter(#creatingCompleter),
//         returnValue: _FakeCompleter_1<void>(
//           this,
//           Invocation.getter(#creatingCompleter),
//         ),
//       ) as _i3.Completer<void>);

//   @override
//   double get volume =>
//       (super.noSuchMethod(Invocation.getter(#volume), returnValue: 0.0)
//           as double);

//   @override
//   double get balance =>
//       (super.noSuchMethod(Invocation.getter(#balance), returnValue: 0.0)
//           as double);

//   @override
//   double get playbackRate =>
//       (super.noSuchMethod(Invocation.getter(#playbackRate), returnValue: 0.0)
//           as double);

//   @override
//   _i2.PlayerMode get mode => (super.noSuchMethod(
//         Invocation.getter(#mode),
//         returnValue: _i2.PlayerMode.mediaPlayer,
//       ) as _i2.PlayerMode);

//   @override
//   _i2.ReleaseMode get releaseMode => (super.noSuchMethod(
//         Invocation.getter(#releaseMode),
//         returnValue: _i2.ReleaseMode.release,
//       ) as _i2.ReleaseMode);

//   @override
//   _i2.PlayerState get state => (super.noSuchMethod(
//         Invocation.getter(#state),
//         returnValue: _i2.PlayerState.stopped,
//       ) as _i2.PlayerState);

//   @override
//   set state(_i2.PlayerState? state) => super.noSuchMethod(
//         Invocation.setter(#state, state),
//         returnValueForMissingStub: null,
//       );

//   @override
//   _i3.Stream<_i2.AudioEvent> get eventStream => (super.noSuchMethod(
//         Invocation.getter(#eventStream),
//         returnValue: _i3.Stream<_i2.AudioEvent>.empty(),
//       ) as _i3.Stream<_i2.AudioEvent>);

//   @override
//   _i3.Stream<_i2.PlayerState> get onPlayerStateChanged => (super.noSuchMethod(
//         Invocation.getter(#onPlayerStateChanged),
//         returnValue: _i3.Stream<_i2.PlayerState>.empty(),
//       ) as _i3.Stream<_i2.PlayerState>);

//   @override
//   _i3.Stream<Duration> get onPositionChanged => (super.noSuchMethod(
//         Invocation.getter(#onPositionChanged),
//         returnValue: _i3.Stream<Duration>.empty(),
//       ) as _i3.Stream<Duration>);

//   @override
//   _i3.Stream<Duration> get onDurationChanged => (super.noSuchMethod(
//         Invocation.getter(#onDurationChanged),
//         returnValue: _i3.Stream<Duration>.empty(),
//       ) as _i3.Stream<Duration>);

//   @override
//   _i3.Stream<void> get onPlayerComplete => (super.noSuchMethod(
//         Invocation.getter(#onPlayerComplete),
//         returnValue: _i3.Stream<void>.empty(),
//       ) as _i3.Stream<void>);

//   @override
//   _i3.Stream<void> get onSeekComplete => (super.noSuchMethod(
//         Invocation.getter(#onSeekComplete),
//         returnValue: _i3.Stream<void>.empty(),
//       ) as _i3.Stream<void>);

//   @override
//   _i3.Stream<String> get onLog => (super.noSuchMethod(
//         Invocation.getter(#onLog),
//         returnValue: _i3.Stream<String>.empty(),
//       ) as _i3.Stream<String>);

//   @override
//   set positionUpdater(_i2.PositionUpdater? positionUpdater) =>
//       super.noSuchMethod(
//         Invocation.setter(#positionUpdater, positionUpdater),
//         returnValueForMissingStub: null,
//       );

//   @override
//   _i3.Future<void> play(
//     _i2.Source? source, {
//     double? volume,
//     double? balance,
//     _i2.AudioContext? ctx,
//     Duration? position,
//     _i2.PlayerMode? mode,
//   }) =>
//       (super.noSuchMethod(
//         Invocation.method(
//           #play,
//           [source],
//           {
//             #volume: volume,
//             #balance: balance,
//             #ctx: ctx,
//             #position: position,
//             #mode: mode,
//           },
//         ),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setAudioContext(_i2.AudioContext? ctx) =>
//       (super.noSuchMethod(
//         Invocation.method(#setAudioContext, [ctx]),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setPlayerMode(_i2.PlayerMode? mode) => (super.noSuchMethod(
//         Invocation.method(#setPlayerMode, [mode]),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> pause() => (super.noSuchMethod(
//         Invocation.method(#pause, []),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> stop() => (super.noSuchMethod(
//         Invocation.method(#stop, []),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> resume() => (super.noSuchMethod(
//         Invocation.method(#resume, []),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> release() => (super.noSuchMethod(
//         Invocation.method(#release, []),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> seek(Duration? position) => (super.noSuchMethod(
//         Invocation.method(#seek, [position]),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setBalance(double? balance) => (super.noSuchMethod(
//         Invocation.method(#setBalance, [balance]),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setVolume(double? volume) => (super.noSuchMethod(
//         Invocation.method(#setVolume, [volume]),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setReleaseMode(_i2.ReleaseMode? releaseMode) =>
//       (super.noSuchMethod(
//         Invocation.method(#setReleaseMode, [releaseMode]),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setPlaybackRate(double? playbackRate) => (super.noSuchMethod(
//         Invocation.method(#setPlaybackRate, [playbackRate]),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setSource(_i2.Source? source) => (super.noSuchMethod(
//         Invocation.method(#setSource, [source]),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setSourceUrl(String? url, {String? mimeType}) =>
//       (super.noSuchMethod(
//         Invocation.method(#setSourceUrl, [url], {#mimeType: mimeType}),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setSourceDeviceFile(String? path, {String? mimeType}) =>
//       (super.noSuchMethod(
//         Invocation.method(
//           #setSourceDeviceFile,
//           [path],
//           {#mimeType: mimeType},
//         ),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setSourceAsset(String? path, {String? mimeType}) =>
//       (super.noSuchMethod(
//         Invocation.method(#setSourceAsset, [path], {#mimeType: mimeType}),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<void> setSourceBytes(_i8.Uint8List? bytes, {String? mimeType}) =>
//       (super.noSuchMethod(
//         Invocation.method(#setSourceBytes, [bytes], {#mimeType: mimeType}),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);

//   @override
//   _i3.Future<Duration?> getDuration() => (super.noSuchMethod(
//         Invocation.method(#getDuration, []),
//         returnValue: _i3.Future<Duration?>.value(),
//       ) as _i3.Future<Duration?>);

//   @override
//   _i3.Future<Duration?> getCurrentPosition() => (super.noSuchMethod(
//         Invocation.method(#getCurrentPosition, []),
//         returnValue: _i3.Future<Duration?>.value(),
//       ) as _i3.Future<Duration?>);

//   @override
//   _i3.Future<void> dispose() => (super.noSuchMethod(
//         Invocation.method(#dispose, []),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);
// }

// /// A class which mocks [WidgetRef].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockWidgetRef extends _i1.Mock implements _i5.WidgetRef {
//   MockWidgetRef() {
//     _i1.throwOnMissingStub(this);
//   }

//   @override
//   _i4.BuildContext get context => (super.noSuchMethod(
//         Invocation.getter(#context),
//         returnValue: _FakeBuildContext_2(this, Invocation.getter(#context)),
//       ) as _i4.BuildContext);

//   @override
//   T watch<T>(_i5.ProviderListenable<T>? provider) => (super.noSuchMethod(
//         Invocation.method(#watch, [provider]),
//         returnValue: _i7.dummyValue<T>(
//           this,
//           Invocation.method(#watch, [provider]),
//         ),
//       ) as T);

//   @override
//   bool exists(_i5.ProviderBase<Object?>? provider) => (super.noSuchMethod(
//         Invocation.method(#exists, [provider]),
//         returnValue: false,
//       ) as bool);

//   @override
//   void listen<T>(
//     _i5.ProviderListenable<T>? provider,
//     void Function(T?, T)? listener, {
//     void Function(Object, StackTrace)? onError,
//   }) =>
//       super.noSuchMethod(
//         Invocation.method(#listen, [provider, listener], {#onError: onError}),
//         returnValueForMissingStub: null,
//       );

//   @override
//   _i5.ProviderSubscription<T> listenManual<T>(
//     _i5.ProviderListenable<T>? provider,
//     void Function(T?, T)? listener, {
//     void Function(Object, StackTrace)? onError,
//     bool? fireImmediately,
//   }) =>
//       (super.noSuchMethod(
//         Invocation.method(
//           #listenManual,
//           [provider, listener],
//           {#onError: onError, #fireImmediately: fireImmediately},
//         ),
//         returnValue: _FakeProviderSubscription_3<T>(
//           this,
//           Invocation.method(
//             #listenManual,
//             [provider, listener],
//             {#onError: onError, #fireImmediately: fireImmediately},
//           ),
//         ),
//       ) as _i5.ProviderSubscription<T>);

//   @override
//   T read<T>(_i5.ProviderListenable<T>? provider) => (super.noSuchMethod(
//         Invocation.method(#read, [provider]),
//         returnValue: _i7.dummyValue<T>(
//           this,
//           Invocation.method(#read, [provider]),
//         ),
//       ) as T);

//   @override
//   State refresh<State>(_i5.Refreshable<State>? provider) => (super.noSuchMethod(
//         Invocation.method(#refresh, [provider]),
//         returnValue: _i7.dummyValue<State>(
//           this,
//           Invocation.method(#refresh, [provider]),
//         ),
//       ) as State);

//   @override
//   void invalidate(_i5.ProviderOrFamily? provider) => super.noSuchMethod(
//         Invocation.method(#invalidate, [provider]),
//         returnValueForMissingStub: null,
//       );
// }

// /// A class which mocks [StateNotifierProvider].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockStateNotifierProvider<NotifierT extends _i6.StateNotifier<T>, T>
//     extends _i1.Mock implements _i5.StateNotifierProvider<NotifierT, T> {
//   MockStateNotifierProvider() {
//     _i1.throwOnMissingStub(this);
//   }

//   @override
//   _i5.AlwaysAliveRefreshable<NotifierT> get notifier => (super.noSuchMethod(
//         Invocation.getter(#notifier),
//         returnValue: _FakeAlwaysAliveRefreshable_4<NotifierT>(
//           this,
//           Invocation.getter(#notifier),
//         ),
//       ) as _i5.AlwaysAliveRefreshable<NotifierT>);

//   @override
//   _i5.StateNotifierProviderElement<NotifierT, T> createElement() =>
//       (super.noSuchMethod(
//         Invocation.method(#createElement, []),
//         returnValue: _FakeStateNotifierProviderElement_5<NotifierT, T>(
//           this,
//           Invocation.method(#createElement, []),
//         ),
//       ) as _i5.StateNotifierProviderElement<NotifierT, T>);

//   @override
//   _i5.Override overrideWith(
//     _i5.Create<NotifierT, _i5.StateNotifierProviderRef<NotifierT, T>>? create,
//   ) =>
//       (super.noSuchMethod(
//         Invocation.method(#overrideWith, [create]),
//         returnValue: _FakeOverride_6(
//           this,
//           Invocation.method(#overrideWith, [create]),
//         ),
//       ) as _i5.Override);

//   @override
//   _i5.ProviderSubscription<T> addListener(
//     _i5.Node? node,
//     void Function(T?, T)? listener, {
//     required void Function(Object, StackTrace)? onError,
//     required void Function()? onDependencyMayHaveChanged,
//     required bool? fireImmediately,
//   }) =>
//       (super.noSuchMethod(
//         Invocation.method(
//           #addListener,
//           [node, listener],
//           {
//             #onError: onError,
//             #onDependencyMayHaveChanged: onDependencyMayHaveChanged,
//             #fireImmediately: fireImmediately,
//           },
//         ),
//         returnValue: _FakeProviderSubscription_3<T>(
//           this,
//           Invocation.method(
//             #addListener,
//             [node, listener],
//             {
//               #onError: onError,
//               #onDependencyMayHaveChanged: onDependencyMayHaveChanged,
//               #fireImmediately: fireImmediately,
//             },
//           ),
//         ),
//       ) as _i5.ProviderSubscription<T>);

//   @override
//   T read(_i5.Node? node) => (super.noSuchMethod(
//         Invocation.method(#read, [node]),
//         returnValue: _i7.dummyValue<T>(
//           this,
//           Invocation.method(#read, [node]),
//         ),
//       ) as T);

//   @override
//   _i5.AlwaysAliveProviderListenable<Selected> select<Selected>(
//     Selected Function(T)? selector,
//   ) =>
//       (super.noSuchMethod(
//         Invocation.method(#select, [selector]),
//         returnValue: _FakeAlwaysAliveProviderListenable_7<Selected>(
//           this,
//           Invocation.method(#select, [selector]),
//         ),
//       ) as _i5.AlwaysAliveProviderListenable<Selected>);
// }

// /// A class which mocks [StateNotifier].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockStateNotifier<T> extends _i1.Mock implements _i6.StateNotifier<T> {
//   MockStateNotifier() {
//     _i1.throwOnMissingStub(this);
//   }

//   @override
//   set onError(_i6.ErrorListener? _onError) => super.noSuchMethod(
//         Invocation.setter(#onError, _onError),
//         returnValueForMissingStub: null,
//       );

//   @override
//   bool get mounted =>
//       (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
//           as bool);

//   @override
//   _i3.Stream<T> get stream => (super.noSuchMethod(
//         Invocation.getter(#stream),
//         returnValue: _i3.Stream<T>.empty(),
//       ) as _i3.Stream<T>);

//   @override
//   T get state => (super.noSuchMethod(
//         Invocation.getter(#state),
//         returnValue: _i7.dummyValue<T>(this, Invocation.getter(#state)),
//       ) as T);

//   @override
//   set state(T? value) => super.noSuchMethod(
//         Invocation.setter(#state, value),
//         returnValueForMissingStub: null,
//       );

//   @override
//   T get debugState => (super.noSuchMethod(
//         Invocation.getter(#debugState),
//         returnValue: _i7.dummyValue<T>(
//           this,
//           Invocation.getter(#debugState),
//         ),
//       ) as T);

//   @override
//   bool get hasListeners =>
//       (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
//           as bool);

//   @override
//   bool updateShouldNotify(T? old, T? current) => (super.noSuchMethod(
//         Invocation.method(#updateShouldNotify, [old, current]),
//         returnValue: false,
//       ) as bool);

//   @override
//   _i6.RemoveListener addListener(
//     _i6.Listener<T>? listener, {
//     bool? fireImmediately = true,
//   }) =>
//       (super.noSuchMethod(
//         Invocation.method(
//           #addListener,
//           [listener],
//           {#fireImmediately: fireImmediately},
//         ),
//         returnValue: () {},
//       ) as _i6.RemoveListener);

//   @override
//   void dispose() => super.noSuchMethod(
//         Invocation.method(#dispose, []),
//         returnValueForMissingStub: null,
//       );
// }

// /// A class which mocks [Fade].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockFade extends _i1.Mock implements _i9.Fade {
//   MockFade() {
//     _i1.throwOnMissingStub(this);
//   }

//   @override
//   _i5.WidgetRef get ref => (super.noSuchMethod(
//         Invocation.getter(#ref),
//         returnValue: _FakeWidgetRef_8(this, Invocation.getter(#ref)),
//       ) as _i5.WidgetRef);

//   @override
//   _i3.Future<void> fade({
//     required double? to,
//     required int? duration,
//     required _i2.AudioPlayer? channel,
//     required _i5.StateNotifierProvider<_i10.VolumeNotifier, _i10.Volume>?
//         provider,
//   }) =>
//       (super.noSuchMethod(
//         Invocation.method(#fade, [], {
//           #to: to,
//           #duration: duration,
//           #channel: channel,
//           #provider: provider,
//         }),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);
// }

// /// A class which mocks [Logger].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockLogger extends _i1.Mock implements _i11.Logger {
//   MockLogger() {
//     _i1.throwOnMissingStub(this);
//   }

//   @override
//   String get tag => (super.noSuchMethod(
//         Invocation.getter(#tag),
//         returnValue: _i7.dummyValue<String>(this, Invocation.getter(#tag)),
//       ) as String);

//   @override
//   void v(String? message, [Object? error, StackTrace? stackTrace]) =>
//       super.noSuchMethod(
//         Invocation.method(#v, [message, error, stackTrace]),
//         returnValueForMissingStub: null,
//       );

//   @override
//   void d(String? message, [Object? error, StackTrace? stackTrace]) =>
//       super.noSuchMethod(
//         Invocation.method(#d, [message, error, stackTrace]),
//         returnValueForMissingStub: null,
//       );

//   @override
//   void i(String? message, [Object? error, StackTrace? stackTrace]) =>
//       super.noSuchMethod(
//         Invocation.method(#i, [message, error, stackTrace]),
//         returnValueForMissingStub: null,
//       );

//   @override
//   void w(String? message, [Object? error, StackTrace? stackTrace]) =>
//       super.noSuchMethod(
//         Invocation.method(#w, [message, error, stackTrace]),
//         returnValueForMissingStub: null,
//       );

//   @override
//   void e(String? message, [Object? error, StackTrace? stackTrace]) =>
//       super.noSuchMethod(
//         Invocation.method(#e, [message, error, stackTrace]),
//         returnValueForMissingStub: null,
//       );

//   @override
//   String getLevelTag(_i11.LogLevel? level) => (super.noSuchMethod(
//         Invocation.method(#getLevelTag, [level]),
//         returnValue: _i7.dummyValue<String>(
//           this,
//           Invocation.method(#getLevelTag, [level]),
//         ),
//       ) as String);
// }
