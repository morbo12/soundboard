name: "Build and Release"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:  
  build-job:      
    name: Build Release Packages
    runs-on: windows-latest 
    outputs:
      VERSION: ${{ steps.extract_info.outputs.VERSION }}
      NAME: ${{ steps.extract_info.outputs.NAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
 
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        env:
            PUB_CACHE: 'D:\a\pub_cache'
        with:
          flutter-version: '3.24.5'
          channel: 'stable'
          architecture: x64
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Clean and Install Dependencies
        run: |
          flutter clean
          flutter pub get
        
      - name: Build Windows App
        run: flutter build windows --release

      - name: Build APK
        run: flutter build apk --release

      - name: Extract version and name from pubspec.yaml
        id: extract_info
        shell: pwsh
        run: |
          $name = (Get-Content pubspec.yaml | Select-String '^name: ').Line.Split(' ')[1].Trim()
          $version = (Get-Content pubspec.yaml | Select-String '^version: ').Line.Split(' ')[1].Trim()
          $version = $version -replace '\+.*$', ''
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "NAME=$name" >> $env:GITHUB_OUTPUT

      - name: Compress Archives and Rename APK
        shell: pwsh
        run: |
          mkdir -p release
          Compress-Archive -Path .\build\windows\x64\runner\Release\* -Destination "release/${{ steps.extract_info.outputs.NAME }}_${{ steps.extract_info.outputs.VERSION }}.zip"
          Move-Item -Path build\app\outputs\flutter-apk\app-release.apk -Destination "release/${{ steps.extract_info.outputs.NAME }}_${{ steps.extract_info.outputs.VERSION }}.apk"

      - name: Determine Release Type
        id: release_type
        run: |
          if ('${{ github.ref }}' -eq 'refs/heads/main') {
            echo "IS_PRERELEASE=false" >> $env:GITHUB_OUTPUT
          } else {
            echo "IS_PRERELEASE=true" >> $env:GITHUB_OUTPUT
          }

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     draft: false
      #     prerelease: ${{ steps.release_type.outputs.IS_PRERELEASE }}
      #     release_name: ${{ steps.extract_info.outputs.VERSION }}${{ steps.release_type.outputs.IS_PRERELEASE == 'true' && ' (Pre-release)' || '' }}
      #     tag_name: v${{ steps.extract_info.outputs.VERSION }}${{ steps.release_type.outputs.IS_PRERELEASE == 'true' && '-pre' || '' }}
      #     body_path: CHANGELOG.md

      # - name: Upload Windows Artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./build/${{ steps.extract_info.outputs.NAME }}_${{ steps.extract_info.outputs.VERSION }}.zip
      #     asset_name: ${{ steps.extract_info.outputs.NAME }}_${{ steps.extract_info.outputs.VERSION }}.zip
      #     asset_content_type: application/zip
  
      # - name: Upload Android Artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./build/${{ steps.extract_info.outputs.NAME }}_${{ steps.extract_info.outputs.VERSION }}.apk
      #     asset_name: ${{ steps.extract_info.outputs.NAME }}_${{ steps.extract_info.outputs.VERSION }}.apk
      #     asset_content_type: application/vnd.android.package-archive
      - name: "Archive artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: release-soundboard-${{ steps.extract_info.outputs.VERSION }}
          path: "release"
      - name: Get Changelog  Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_level: warn
          version: ${{ steps.extract_info.outputs.VERSION }}
          path: ./CHANGELOG.md
  
      - name: Publish archives and packages
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.changelog_reader.outputs.version }}
          tag_name: ${{ steps.changelog_reader.outputs.version }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
          files: release*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # release-job:
  #   name: Publish
  #   needs: build-job
  #   runs-on: ubuntu-latest
  #   env:
  #     VERSION: ${{needs.build-job.outputs.VERSION}}
  #     NAME: ${{needs.build-job.outputs.NAME}}
  #     IS_PRERELEASE: ${{needs.build-job.outputs.IS_PRERELEASE}}

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #     - name: Download packages
  #       uses: actions/download-artifact@v4.1.7
  #     # - name: Get release version
  #     #   id: release_version
  #     #   run: |
  #     #     echo "VERSION=${{needs.build_job.outputs.VERSION}}" >> $GITHUB_ENV
  #     #     echo "prerelease=$( [[ ${GITHUB_REF#refs/*/} == *alpha* || ${GITHUB_REF#refs/*/} == *beta* ]] && echo True || echo False )" >> $GITHUB_ENV

  #     - name: Get Changelog  Entry
  #       id: changelog_reader
  #       uses: mindsers/changelog-reader-action@v2
  #       with:
  #         validation_level: warn
  #         version: ${{ env.VERSION }}
  #         path: ./CHANGELOG.md

  #     - name: Publish archives and packages
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         name: Release ${{ steps.changelog_reader.outputs.version }}
  #         tag_name: ${{ steps.changelog_reader.outputs.version }}
  #         body: ${{ steps.changelog_reader.outputs.changes }}
  #         prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
  #         draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
  #         allowUpdates: true
  #         files: release*/*
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # release-job:
  #   name: Publish
  #   needs: build-job
  #   runs-on: ubuntu-latest
  #   env:
  #     VERSION: ${{needs.build-job.outputs.VERSION}}
  #     NAME: ${{needs.build-job.outputs.NAME}}
  #     IS_PRERELEASE: ${{needs.build-job.outputs.IS_PRERELEASE}}

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #     - name: Download packages
  #       uses: actions/download-artifact@v4.1.7
  #     # - name: Get release version
  #     #   id: release_version
  #     #   run: |
  #     #     echo "VERSION=${{needs.build_job.outputs.VERSION}}" >> $GITHUB_ENV
  #     #     echo "prerelease=$( [[ ${GITHUB_REF#refs/*/} == *alpha* || ${GITHUB_REF#refs/*/} == *beta* ]] && echo True || echo False )" >> $GITHUB_ENV

  #     - name: Get Changelog  Entry
  #       id: changelog_reader
  #       uses: mindsers/changelog-reader-action@v2
  #       with:
  #         validation_level: warn
  #         version: ${{ env.VERSION }}
  #         path: ./CHANGELOG.md

  #     - name: Publish archives and packages
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         name: Release ${{ steps.changelog_reader.outputs.version }}
  #         tag_name: ${{ steps.changelog_reader.outputs.version }}
  #         body: ${{ steps.changelog_reader.outputs.changes }}
  #         prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
  #         draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
  #         allowUpdates: true
  #         files: release*/*
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}