name: "Build and Release"

permissions:
  contents: write
  packages: read

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.35.2"
  JAVA_VERSION: "21"

jobs:
  build-job:
    timeout-minutes: 60
    name: Build Release Packages
    runs-on: windows-2025
    outputs:
      VERSION: ${{ steps.extract_info.outputs.VERSION }}
      NAME: ${{ steps.extract_info.outputs.NAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      # - name: Upgrade InnoSetup
      #   run: |
      #     winget install --id JRSoftware.InnoSetup -e -s winget -h

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        env:
          PUB_CACHE: 'D:\a\pub_cache'
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          architecture: x64
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Clean and Install Dependencies
        run: |
          flutter clean
          flutter pub get

      - name: Run Unit Tests
        run: |
          flutter test

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build Windows App
        run: flutter build windows --release

      # - name: Build APK
      #   run: flutter build apk --release

      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Extract version and name from pubspec.yaml
        id: extract_info
        shell: pwsh
        run: |
          $name = (Get-Content pubspec.yaml | Select-String '^name: ').Line.Split(' ')[1].Trim()
          $version = (Get-Content pubspec.yaml | Select-String '^version: ').Line.Split(' ')[1].Trim()
          $version = $version -replace '\+.*$', ''
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "NAME=$name" >> $env:GITHUB_OUTPUT
          '#define MyAppVersion "{0}"' -f $version | Set-Content version.iss

      # - name: Compress Archives and Rename APK
      #   shell: pwsh
      #   run: |
      #     mkdir -p release
      #     # Compress-Archive -Path build\windows\x64\runner\Release\data\flutter_assets\assets\jingles\* -Destination release\eu.fbtools-BasicJinglePack_{{ steps.extract_info.outputs.VERSION }.zip
      #     # Remove-Item -Path build\windows\x64\runner\Release\data\flutter_assets\assets\jingles -Force -Recurse
      #     # Compress-Archive -Path .\build\windows\x64\runner\Release\* -Destination "release/${{ steps.extract_info.outputs.NAME }}_${{ steps.extract_info.outputs.VERSION }}.zip"
      #     Move-Item -Path build\app\outputs\flutter-apk\app-release.apk -Destination "release/${{ steps.extract_info.outputs.NAME }}_${{ steps.extract_info.outputs.VERSION }}.apk"

      - name: Compile .ISS to .EXE Installer
        shell: pwsh
        run: |
          Get-Content version.iss
          $innoSetupPaths = @(
            "${env:ProgramFiles}\Inno Setup 6\ISCC.exe",
            "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe",
            "${env:LOCALAPPDATA}\Programs\Inno Setup 6\ISCC.exe"
          )

          $innoSetupPath = $null
          foreach ($path in $innoSetupPaths) {
            if (Test-Path $path) {
              $innoSetupPath = $path
              Write-Host "Found Inno Setup compiler at: $path"
              break
            }
          }

          if (-not $innoSetupPath) {
            throw "Inno Setup compiler not found in any of the expected locations: $($innoSetupPaths -join ', ')"
          }

          & "$innoSetupPath" /O+ "soundboard.iss"

      - name: Determine Release Type
        id: release_type
        run: |
          if ('${{ github.ref }}' -eq 'refs/heads/main') {
            echo "IS_PRERELEASE=false" >> $env:GITHUB_OUTPUT
          } else {
            echo "IS_PRERELEASE=true" >> $env:GITHUB_OUTPUT
          }

      - name: "Archive artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: release-soundboard-${{ steps.extract_info.outputs.VERSION }}
          path: "release"
      - name: Get Changelog  Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.extract_info.outputs.VERSION }}
          path: ./CHANGELOG.md

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.changelog_reader.outputs.version }}
          tag_name: "v${{ steps.changelog_reader.outputs.version }}"
          body: ${{ steps.changelog_reader.outputs.changes }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
          files: release*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
